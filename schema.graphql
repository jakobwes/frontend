# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

interface AbstractEntity {
    alias: String
    date: DateTime!
    "extends AbstractRepository"
    id: Int!
    instance: Instance!
    license: License!
    trashed: Boolean!
}

interface AbstractEntityRevision {
    "extends AbstractRevision"
    author: User!
    changes: String!
    content: String!
    date: DateTime!
    "extends AbstractUuid"
    id: Int!
    trashed: Boolean!
}

interface AbstractExercise {
    alias: String
    currentRevision: AbstractExerciseRevision
    date: DateTime!
    "extends AbstractEntity"
    id: Int!
    instance: Instance!
    license: License!
    solution: Solution
    trashed: Boolean!
}

interface AbstractExerciseRevision {
    alias: String
    author: User!
    changes: String!
    content: String!
    date: DateTime!
    "extends AbstractEntityRevision"
    id: Int!
    trashed: Boolean!
}

interface AbstractNavigationChild {
    navigation: Navigation
}

interface AbstractNotificationEvent {
    actor: User!
    date: DateTime!
    id: Int!
    instance: Instance!
    objectId: Int!
}

interface AbstractRepository {
    alias: String
    date: DateTime!
    "extends AbstractUuid"
    id: Int!
    instance: Instance!
    license: License!
    "extends ThreadAware"
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    trashed: Boolean!
}

interface AbstractRevision {
    alias: String
    """

    Implicitly has the following field
    repository: AbstractRepository!
    """
    author: User!
    content: String!
    date: DateTime!
    "extends AbstractUuid"
    id: Int!
    "extends ThreadAware"
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    trashed: Boolean!
}

interface AbstractTaxonomyTermChild {
    alias: String
    date: DateTime!
    "extends AbstractEntity"
    id: Int!
    instance: Instance!
    license: License!
    taxonomyTerms(after: String, before: String, first: Int, last: Int): TaxonomyTermConnection!
    trashed: Boolean!
}

interface AbstractUuid {
    alias: String
    id: Int!
    trashed: Boolean!
}

interface InstanceAware {
    instance: Instance!
}

interface ThreadAware {
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
}

type AbstractUuidConnection {
    edges: [AbstractUuidCursor!]!
    nodes: [AbstractUuid!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type AbstractUuidCursor {
    cursor: String!
    node: AbstractUuid!
}

type Applet implements AbstractEntity & AbstractRepository & AbstractTaxonomyTermChild & AbstractUuid & InstanceAware & ThreadAware {
    alias: String
    currentRevision: AppletRevision
    date: DateTime!
    id: Int!
    instance: Instance!
    license: License!
    revisions(after: String, before: String, first: Int, last: Int, unrevised: Boolean): AppletRevisionConnection!
    taxonomyTerms(after: String, before: String, first: Int, last: Int): TaxonomyTermConnection!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    trashed: Boolean!
}

type AppletRevision implements AbstractEntityRevision & AbstractRevision & AbstractUuid & ThreadAware {
    alias: String
    author: User!
    changes: String!
    content: String!
    date: DateTime!
    id: Int!
    metaDescription: String!
    metaTitle: String!
    repository: Applet!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    title: String!
    trashed: Boolean!
    url: String!
}

type AppletRevisionConnection {
    edges: [AppletRevisionCursor!]!
    nodes: [AppletRevision!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type AppletRevisionCursor {
    cursor: String!
    node: AppletRevision!
}

type Article implements AbstractEntity & AbstractRepository & AbstractTaxonomyTermChild & AbstractUuid & InstanceAware & ThreadAware {
    alias: String
    currentRevision: ArticleRevision
    date: DateTime!
    id: Int!
    instance: Instance!
    license: License!
    revisions(after: String, before: String, first: Int, last: Int, unrevised: Boolean): ArticleRevisionConnection!
    taxonomyTerms(after: String, before: String, first: Int, last: Int): TaxonomyTermConnection!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    trashed: Boolean!
}

type ArticleRevision implements AbstractEntityRevision & AbstractRevision & AbstractUuid & ThreadAware {
    alias: String
    author: User!
    changes: String!
    content: String!
    date: DateTime!
    id: Int!
    metaDescription: String!
    metaTitle: String!
    repository: Article!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    title: String!
    trashed: Boolean!
}

type ArticleRevisionConnection {
    edges: [ArticleRevisionCursor!]!
    nodes: [ArticleRevision!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ArticleRevisionCursor {
    cursor: String!
    node: ArticleRevision!
}

type CheckoutRevisionNotificationEvent implements AbstractNotificationEvent & InstanceAware {
    actor: User!
    date: DateTime!
    id: Int!
    instance: Instance!
    objectId: Int!
    reason: String!
    repository: AbstractRepository!
    revision: AbstractRevision!
}

type Comment implements AbstractUuid {
    alias: String!
    archived: Boolean!
    author: User!
    content: String!
    createdAt: DateTime!
    id: Int!
    title: String!
    trashed: Boolean!
}

type CommentConnection {
    edges: [CommentEdge!]!
    nodes: [Comment!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type CommentEdge {
    cursor: String!
    node: Comment!
}

type Course implements AbstractEntity & AbstractRepository & AbstractTaxonomyTermChild & AbstractUuid & InstanceAware & ThreadAware {
    alias: String
    currentRevision: CourseRevision
    date: DateTime!
    id: Int!
    instance: Instance!
    license: License!
    pages(hasCurrentRevision: Boolean, trashed: Boolean): [CoursePage!]!
    revisions(after: String, before: String, first: Int, last: Int, unrevised: Boolean): CourseRevisionConnection!
    taxonomyTerms(after: String, before: String, first: Int, last: Int): TaxonomyTermConnection!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    trashed: Boolean!
}

type CoursePage implements AbstractEntity & AbstractRepository & AbstractUuid & InstanceAware & ThreadAware {
    alias: String
    course: Course!
    currentRevision: CoursePageRevision
    date: DateTime!
    id: Int!
    instance: Instance!
    license: License!
    revisions(after: String, before: String, first: Int, last: Int, unrevised: Boolean): CoursePageRevisionConnection!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    trashed: Boolean!
}

type CoursePageRevision implements AbstractEntityRevision & AbstractRevision & AbstractUuid & ThreadAware {
    alias: String
    author: User!
    changes: String!
    content: String!
    date: DateTime!
    id: Int!
    repository: CoursePage!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    title: String!
    trashed: Boolean!
}

type CoursePageRevisionConnection {
    edges: [CoursePageRevisionCursor!]!
    nodes: [CoursePageRevision!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type CoursePageRevisionCursor {
    cursor: String!
    node: CoursePageRevision!
}

type CourseRevision implements AbstractEntityRevision & AbstractRevision & AbstractUuid & ThreadAware {
    alias: String
    author: User!
    changes: String!
    content: String!
    date: DateTime!
    id: Int!
    metaDescription: String!
    repository: Course!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    title: String!
    trashed: Boolean!
}

type CourseRevisionConnection {
    edges: [CourseRevisionCursor!]!
    nodes: [CourseRevision!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type CourseRevisionCursor {
    cursor: String!
    node: CourseRevision!
}

type CreateCommentNotificationEvent implements AbstractNotificationEvent & InstanceAware {
    actor: User!
    comment: UnsupportedComment!
    date: DateTime!
    id: Int!
    instance: Instance!
    objectId: Int!
    thread: UnsupportedThread!
}

type CreateEntityLinkNotificationEvent implements AbstractNotificationEvent & InstanceAware {
    actor: User!
    child: AbstractEntity!
    date: DateTime!
    id: Int!
    instance: Instance!
    objectId: Int!
    parent: AbstractEntity!
}

type CreateEntityNotificationEvent implements AbstractNotificationEvent & InstanceAware {
    actor: User!
    date: DateTime!
    entity: AbstractEntity!
    id: Int!
    instance: Instance!
    objectId: Int!
}

type CreateEntityRevisionNotificationEvent implements AbstractNotificationEvent & InstanceAware {
    actor: User!
    date: DateTime!
    entity: AbstractEntity!
    entityRevision: AbstractEntityRevision!
    id: Int!
    instance: Instance!
    objectId: Int!
}

type CreateTaxonomyLinkNotificationEvent implements AbstractNotificationEvent & InstanceAware {
    actor: User!
    child: AbstractUuid!
    date: DateTime!
    id: Int!
    instance: Instance!
    objectId: Int!
    parent: TaxonomyTerm!
}

type CreateTaxonomyTermNotificationEvent implements AbstractNotificationEvent & InstanceAware {
    actor: User!
    date: DateTime!
    id: Int!
    instance: Instance!
    objectId: Int!
    taxonomyTerm: TaxonomyTerm!
}

type CreateThreadNotificationEvent implements AbstractNotificationEvent & InstanceAware {
    actor: User!
    date: DateTime!
    id: Int!
    instance: Instance!
    object: AbstractUuid!
    objectId: Int!
    thread: UnsupportedThread!
}

type Event implements AbstractEntity & AbstractRepository & AbstractTaxonomyTermChild & AbstractUuid & InstanceAware & ThreadAware {
    alias: String
    currentRevision: EventRevision
    date: DateTime!
    id: Int!
    instance: Instance!
    license: License!
    revisions(after: String, before: String, first: Int, last: Int, unrevised: Boolean): EventRevisionConnection!
    taxonomyTerms(after: String, before: String, first: Int, last: Int): TaxonomyTermConnection!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    trashed: Boolean!
}

type EventRevision implements AbstractEntityRevision & AbstractRevision & AbstractUuid & ThreadAware {
    alias: String
    author: User!
    changes: String!
    content: String!
    date: DateTime!
    id: Int!
    metaDescription: String!
    metaTitle: String!
    repository: Event!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    title: String!
    trashed: Boolean!
}

type EventRevisionConnection {
    edges: [EventRevisionCursor!]!
    nodes: [EventRevision!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type EventRevisionCursor {
    cursor: String!
    node: EventRevision!
}

type Exercise implements AbstractEntity & AbstractExercise & AbstractRepository & AbstractTaxonomyTermChild & AbstractUuid & InstanceAware & ThreadAware {
    alias: String
    currentRevision: ExerciseRevision
    date: DateTime!
    id: Int!
    instance: Instance!
    license: License!
    revisions(after: String, before: String, first: Int, last: Int, unrevised: Boolean): ExerciseRevisionConnection!
    solution: Solution
    taxonomyTerms(after: String, before: String, first: Int, last: Int): TaxonomyTermConnection!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    trashed: Boolean!
}

type ExerciseGroup implements AbstractEntity & AbstractRepository & AbstractTaxonomyTermChild & AbstractUuid & InstanceAware & ThreadAware {
    alias: String
    currentRevision: ExerciseGroupRevision
    date: DateTime!
    exercises: [GroupedExercise!]!
    id: Int!
    instance: Instance!
    license: License!
    revisions(after: String, before: String, first: Int, last: Int, unrevised: Boolean): ExerciseGroupRevisionConnection!
    taxonomyTerms(after: String, before: String, first: Int, last: Int): TaxonomyTermConnection!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    trashed: Boolean!
}

type ExerciseGroupRevision implements AbstractEntityRevision & AbstractRevision & AbstractUuid & ThreadAware {
    alias: String
    author: User!
    changes: String!
    content: String!
    date: DateTime!
    id: Int!
    repository: ExerciseGroup!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    trashed: Boolean!
}

type ExerciseGroupRevisionConnection {
    edges: [ExerciseGroupRevisionCursor!]!
    nodes: [ExerciseGroupRevision!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ExerciseGroupRevisionCursor {
    cursor: String!
    node: ExerciseGroupRevision!
}

type ExerciseRevision implements AbstractEntityRevision & AbstractExerciseRevision & AbstractRevision & AbstractUuid & ThreadAware {
    alias: String
    author: User!
    changes: String!
    content: String!
    date: DateTime!
    id: Int!
    repository: Exercise!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    trashed: Boolean!
}

type ExerciseRevisionConnection {
    edges: [ExerciseRevisionCursor!]!
    nodes: [ExerciseRevision!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ExerciseRevisionCursor {
    cursor: String!
    node: ExerciseRevision!
}

type GroupedExercise implements AbstractEntity & AbstractExercise & AbstractRepository & AbstractUuid & InstanceAware & ThreadAware {
    alias: String
    currentRevision: GroupedExerciseRevision
    date: DateTime!
    exerciseGroup: ExerciseGroup!
    id: Int!
    instance: Instance!
    license: License!
    revisions(after: String, before: String, first: Int, last: Int, unrevised: Boolean): GroupedExerciseRevisionConnection!
    solution: Solution
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    trashed: Boolean!
}

type GroupedExerciseRevision implements AbstractEntityRevision & AbstractExerciseRevision & AbstractRevision & AbstractUuid & ThreadAware {
    alias: String
    author: User!
    changes: String!
    content: String!
    date: DateTime!
    id: Int!
    repository: GroupedExercise!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    trashed: Boolean!
}

type GroupedExerciseRevisionConnection {
    edges: [GroupedExerciseRevisionCursor!]!
    nodes: [GroupedExerciseRevision!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type GroupedExerciseRevisionCursor {
    cursor: String!
    node: GroupedExerciseRevision!
}

type License implements InstanceAware {
    agreement: String!
    content: String!
    default: Boolean!
    iconHref: String!
    id: Int!
    instance: Instance!
    title: String!
    url: String!
}

type Mutation {
    _removeCache(key: String!): Boolean
    _setCache(key: String!, value: JSON!): Boolean
    _updateCache(keys: [String!]!): Boolean
    notification: NotificationMutation!
    subscription: SubscriptionMutation!
    thread: ThreadMutation!
    uuid: UuidMutation!
}

type Navigation {
    data: JSON!
    path(after: String, before: String, first: Int, last: Int): NavigationNodeConnection!
}

type NavigationNode {
    id: Int
    label: String!
    url: String
}

type NavigationNodeConnection {
    edges: [NavigationNodeEdge]
    nodes: [NavigationNode!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type NavigationNodeEdge {
    cursor: String!
    node: NavigationNode!
}

type Notification {
    event: AbstractNotificationEvent!
    id: Int!
    unread: Boolean!
}

type NotificationConnection {
    edges: [NotificationEdge!]!
    nodes: [Notification!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type NotificationEdge {
    cursor: String!
    node: Notification!
}

type NotificationMutation {
    setState(input: NotificationSetStateInput!): NotificationSetStateResponse
}

type NotificationSetStateResponse {
    query: Query!
    success: Boolean!
}

type Page implements AbstractNavigationChild & AbstractRepository & AbstractUuid & InstanceAware & ThreadAware {
    alias: String
    currentRevision: PageRevision
    date: DateTime!
    id: Int!
    instance: Instance!
    license: License!
    navigation: Navigation
    revisions(after: String, before: String, first: Int, last: Int, unrevised: Boolean): PageRevisionConnection!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    trashed: Boolean!
}

type PageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type PageRevision implements AbstractRevision & AbstractUuid & ThreadAware {
    alias: String
    author: User!
    content: String!
    date: DateTime!
    id: Int!
    repository: Page!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    title: String!
    trashed: Boolean!
}

type PageRevisionConnection {
    edges: [PageRevisionCursor!]!
    nodes: [PageRevision!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type PageRevisionCursor {
    cursor: String!
    node: PageRevision!
}

type Query {
    activeAuthors(after: String, before: String, first: Int, last: Int): UserConnection!
    activeDonors(after: String, before: String, first: Int, last: Int): UserConnection!
    activeReviewers(after: String, before: String, first: Int, last: Int): UserConnection!
    license(id: Int!): License
    notificationEvent(id: Int!): AbstractNotificationEvent
    notifications(after: String, before: String, first: Int, last: Int, unread: Boolean): NotificationConnection!
    subscriptions(after: String, before: String, first: Int, last: Int): QuerySubscriptionResult!
    uuid(alias: AliasInput, id: Int): AbstractUuid
}

type QuerySubscriptionResult {
    edges: [SubscriptionCursor!]!
    nodes: [AbstractUuid!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type RejectRevisionNotificationEvent implements AbstractNotificationEvent & InstanceAware {
    actor: User!
    date: DateTime!
    id: Int!
    instance: Instance!
    objectId: Int!
    reason: String!
    repository: AbstractRepository!
    revision: AbstractRevision!
}

type RemoveEntityLinkNotificationEvent implements AbstractNotificationEvent & InstanceAware {
    actor: User!
    child: AbstractEntity!
    date: DateTime!
    id: Int!
    instance: Instance!
    objectId: Int!
    parent: AbstractEntity!
}

type RemoveTaxonomyLinkNotificationEvent implements AbstractNotificationEvent & InstanceAware {
    actor: User!
    child: AbstractUuid!
    date: DateTime!
    id: Int!
    instance: Instance!
    objectId: Int!
    parent: TaxonomyTerm!
}

type SetLicenseNotificationEvent implements AbstractNotificationEvent & InstanceAware {
    actor: User!
    date: DateTime!
    id: Int!
    instance: Instance!
    objectId: Int!
    repository: AbstractRepository!
}

type SetTaxonomyParentNotificationEvent implements AbstractNotificationEvent & InstanceAware {
    actor: User!
    child: TaxonomyTerm!
    date: DateTime!
    id: Int!
    instance: Instance!
    objectId: Int!
    parent: TaxonomyTerm
    previousParent: TaxonomyTerm
}

type SetTaxonomyTermNotificationEvent implements AbstractNotificationEvent & InstanceAware {
    actor: User!
    date: DateTime!
    id: Int!
    instance: Instance!
    objectId: Int!
    taxonomyTerm: TaxonomyTerm!
}

type SetThreadStateNotificationEvent implements AbstractNotificationEvent & InstanceAware {
    actor: User!
    archived: Boolean!
    date: DateTime!
    id: Int!
    instance: Instance!
    objectId: Int!
    thread: UnsupportedThread!
}

type SetUuidStateNotificationEvent implements AbstractNotificationEvent & InstanceAware {
    actor: User!
    date: DateTime!
    id: Int!
    instance: Instance!
    object: AbstractUuid!
    objectId: Int!
    trashed: Boolean!
}

type Solution implements AbstractEntity & AbstractRepository & AbstractUuid & InstanceAware & ThreadAware {
    alias: String
    currentRevision: SolutionRevision
    date: DateTime!
    exercise: AbstractExercise!
    id: Int!
    instance: Instance!
    license: License!
    revisions(after: String, before: String, first: Int, last: Int, unrevised: Boolean): SolutionRevisionConnection
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    trashed: Boolean!
}

type SolutionRevision implements AbstractEntityRevision & AbstractRevision & AbstractUuid & ThreadAware {
    alias: String
    author: User!
    changes: String!
    content: String!
    date: DateTime!
    id: Int!
    repository: Solution!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    trashed: Boolean!
}

type SolutionRevisionConnection {
    edges: [SolutionRevisionCursor!]!
    nodes: [SolutionRevision!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type SolutionRevisionCursor {
    cursor: String!
    node: SolutionRevision!
}

type SubscriptionCursor {
    cursor: String!
    node: AbstractUuid!
}

type SubscriptionMutation {
    set(input: SubscriptionSetInput!): SubscriptionSetResponse
}

type SubscriptionSetResponse {
    query: Query!
    success: Boolean!
}

type TaxonomyTerm implements AbstractNavigationChild & AbstractUuid & InstanceAware & ThreadAware {
    alias: String
    children(after: String, before: String, first: Int, last: Int): AbstractUuidConnection!
    description: String
    id: Int!
    instance: Instance!
    name: String!
    navigation: Navigation
    parent: TaxonomyTerm
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    trashed: Boolean!
    type: TaxonomyTermType!
    weight: Int!
}

type TaxonomyTermConnection {
    edges: [TaxonomyTermEdge]
    nodes: [TaxonomyTerm!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type TaxonomyTermEdge {
    cursor: String!
    node: TaxonomyTerm!
}

type Thread {
    archived: Boolean!
    comments(after: String, before: String, first: Int, last: Int): CommentConnection!
    createdAt: DateTime!
    id: String!
    object: AbstractUuid!
    title: String
}

type ThreadCreateCommentResponse {
    query: Query!
    record: Comment
    success: Boolean!
}

type ThreadCreateThreadResponse {
    query: Query!
    record: Thread
    success: Boolean!
}

type ThreadMutation {
    createComment(input: ThreadCreateCommentInput!): ThreadCreateCommentResponse
    createThread(input: ThreadCreateThreadInput!): ThreadCreateThreadResponse
    setCommentState(input: ThreadSetCommentStateInput!): ThreadSetCommentStateResponse
    setThreadArchived(input: ThreadSetThreadArchivedInput!): ThreadSetThreadArchivedResponse
    setThreadState(input: ThreadSetThreadStateInput!): ThreadSetThreadStateResponse
}

type ThreadSetCommentStateResponse {
    query: Query!
    success: Boolean!
}

type ThreadSetThreadArchivedResponse {
    query: Query!
    success: Boolean!
}

type ThreadSetThreadStateResponse {
    query: Query!
    success: Boolean!
}

type ThreadsConnection {
    edges: [ThreadsCursor!]!
    nodes: [Thread!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type ThreadsCursor {
    cursor: String!
    node: Thread!
}

type UnsupportedComment {
    id: Int!
}

type UnsupportedThread {
    id: Int!
}

type User implements AbstractUuid & ThreadAware {
    activeAuthor: Boolean!
    activeDonor: Boolean!
    activeReviewer: Boolean!
    alias: String
    date: DateTime!
    description: String
    id: Int!
    lastLogin: DateTime
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    trashed: Boolean!
    username: String!
}

type UserConnection {
    edges: [UserEdge!]!
    nodes: [User!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type UserEdge {
    cursor: String!
    node: User!
}

type UuidMutation {
    setState(input: UuidSetStateInput!): UuidSetStateResponse
}

type UuidSetStateResponse {
    query: Query!
    success: Boolean!
}

type Video implements AbstractEntity & AbstractRepository & AbstractTaxonomyTermChild & AbstractUuid & InstanceAware & ThreadAware {
    alias: String
    currentRevision: VideoRevision
    date: DateTime!
    id: Int!
    instance: Instance!
    license: License!
    revisions(after: String, before: String, first: Int, last: Int, unrevised: Boolean): VideoRevisionConnection!
    taxonomyTerms(after: String, before: String, first: Int, last: Int): TaxonomyTermConnection!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    trashed: Boolean!
}

type VideoRevision implements AbstractEntityRevision & AbstractRevision & AbstractUuid & ThreadAware {
    alias: String
    author: User!
    changes: String!
    content: String!
    date: DateTime!
    id: Int!
    repository: Video!
    threads(after: String, archived: Boolean, before: String, first: Int, last: Int, trashed: Boolean): ThreadsConnection!
    title: String!
    trashed: Boolean!
    url: String!
}

type VideoRevisionConnection {
    edges: [VideoRevisionCursor!]!
    nodes: [VideoRevision!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type VideoRevisionCursor {
    cursor: String!
    node: VideoRevision!
}

enum CacheControlScope {
    PRIVATE
    PUBLIC
}

enum Instance {
    de
    en
    es
    fr
    hi
    ta
}

enum TaxonomyTermType {
    blog
    curriculum
    curriculumTopic
    curriculumTopicFolder
    forum
    forumCategory
    locale
    root
    subject
    topic
    topicFolder
}

input AliasInput {
    instance: Instance!
    path: String!
}

input NotificationSetStateInput {
    id: [Int!]!
    unread: Boolean!
}

input SubscriptionSetInput {
    id: [Int!]!
    sendEmail: Boolean!
    subscribe: Boolean!
}

input ThreadCreateCommentInput {
    content: String!
    sendEmail: Boolean!
    subscribe: Boolean!
    threadId: String!
}

input ThreadCreateThreadInput {
    content: String!
    objectId: Int!
    sendEmail: Boolean!
    subscribe: Boolean!
    title: String!
}

input ThreadSetCommentStateInput {
    id: [Int!]!
    trashed: Boolean!
}

input ThreadSetThreadArchivedInput {
    archived: Boolean!
    id: [String!]!
}

input ThreadSetThreadStateInput {
    id: [String!]!
    trashed: Boolean!
}

input UuidSetStateInput {
    id: [Int!]!
    trashed: Boolean!
}


scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSONObject

"The `Upload` scalar type represents a file upload."
scalar Upload
